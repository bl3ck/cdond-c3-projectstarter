# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            exit
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm install
            npm run build
            exit
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test Front-end
          command: |
              # Your code here
              cd frontend
              npm install
              npm run test
              exit
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test Front-end
          command: |
              # Your code here
              cd backend
              npm install
              npm run test
              exit
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend 
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force 
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [deploy-infrastructure]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
            exit
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            yum install -y tar gzip
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
            exit
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query "Reservations[*].Instances[*].[PublicIpAddress]" \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d0:f5:31:3a:b8:0e:a4:eb:f3:f9:fc:9b:81:08:57:93"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            # Installing ansible
            python3 -m pip install --user ansible
            # Installing tar and unzip
            sudo apt-get update
            sudo apt-get install -y tar unzip
            # Installing aws cli
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            # apk add --update --no-cache ansible tar gzip aws-cli openssh
      - run:
          name: Configure server
          command: |
            # Your code here
            pwd
            cd .circleci/ansible
            ls -al
            cat inventory.txt
            # ansible web -i tests -m ping
            # ansible all -m ping -vvvv
            # ansible web -m ping -u ubuntu
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      - run:
          name: Configure Node exporter on the server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-prometheus-node-exporter.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  run-migrations:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Installing dependencies
          command: |
              # Install Node.js 
              cd backend
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt-get install -y nodejs
              # Installing aws cli
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              sudo npm install -g npm@9.4.2
              sudo npm install typescript -g
              sudo npm i -g npm
      - run: 
          name: Run migrations 
          command: |
            cd backend
            # ls -a
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/DkX3oHU6rtDfjXcrrzWZMV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '2'
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

deploy-frontend:
  docker:
    - image: cimg/python:3.10
  steps:
    - checkout
    - restore_cache:
        keys: [frontend-build]
    - run:
        name: Install env dependencies
        command: |
          # Install Node.js 
          cd backend
          curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
          sudo apt-get install -y nodejs
          # Installing aws cli
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Deploy frontend objects
        command: |
          BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
          export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
          echo "${API_URL}"
          echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
          cat frontend/.env
          cd frontend
          npm run build
          aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
    - destroy-environment:
      - workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  udaPeople-workflow:
    jobs:
      - say-hello
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
