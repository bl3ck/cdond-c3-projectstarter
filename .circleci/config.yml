# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # Empty frontend bucket
            # aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 
  revert-migration:
    description: Reverts migrations for given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migration
          when: on_fail
          command: |
            # Your code here
            SUCCESS=$(curl --insecure  https://kvdb.io/DkX3oHU6rtDfjXcrrzWZMV/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # Logic for reverting the database state
            if (( $SUCCESS == 2 ));
            then
              cd backend
              npm install
              npm run migration:revert
            fi
  
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_typescript:
    description: Install TypeScript
    steps:
      - run:
          name: Install TypeScript
          command: |
            curl -s https://deb.nodesource.com/setup_16.x | sudo bash
            sudo apt install nodejs -y
            sudo npm install -g typescript@latest
  install_npm9:
    description: Install npm@9.4.2
    steps:
      - run:
          name: Install npm@9.4.2
          command: |
            sudo npm install -g npm@9.4.2
            
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            python3 -m pip install --user ansible
  install_tar_unzip:
    description: Install Ansible
    steps:
      - run:
          name: Ensure package tar and unzip are installed
          command: |
            sudo apt-get update
            sudo apt-get install -y tar unzip
  install_nodejs:
      description: Install Node.js 13.8.0
      steps:
        - run:
            name: Install Node.js 13.8.0
            command: |
              # Install Node.js LTS version as our base Node.js version
              # curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              curl -s https://deb.nodesource.com/setup_16.x | sudo bash
              sudo apt install nodejs -y
              # Use n version manager to use Node.js v13.8.0
              # sudo npm install --global n
              # sudo n 13.8.0
              sudo npm i -g npm@latest
  install_nodejs_13:
      description: Install Node.js 13.8.0
      steps:
        - run:
            name: Install Node.js 13.8.0
            command: |
              # Install Node.js LTS version as our base Node.js version
              curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
              sudo apt install -y nodejs

              # Use n version manager to use Node.js v13.8.0
              sudo npm install --global n
              sudo n 13.8.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test Front-end
          command: |
              # Your code here
              cd frontend
              npm install
              npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend
  
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test Front-end
          command: |
              # Your code here
              cd backend
              npm install
              npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan Front-end
          command: |
            cd frontend
            npm install
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend 
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm install
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force 
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend
  
  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_awscli
      - restore_cache:
          keys: [deploy-infrastructure]
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      # - install_tar_unzip
      - install_awscli
      - install_ansible
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d0:f5:31:3a:b8:0e:a4:eb:f3:f9:fc:9b:81:08:57:93"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            # Your code here
            pwd
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          # no_output_timeout: 30m
      - run:
          name: Configure Node exporter on the server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-prometheus-node-exporter.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  run-migrations:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_nodejs_13
      - install_awscli
      - restore_cache:
          keys: [backend-build]
      # - run:
      #     name: remove node modules
      #     command: |
      #       cd backend
      #       ls -al
      #       sudo npm cache clean --force
      #       sudo rm -rf node_modules
      #       # sudo npm install npm@latest -g
      #       npm install
      #       npm audit fix --force
      - run: 
          name: Run migrations 
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/DkX3oHU6rtDfjXcrrzWZMV/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '2'
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  deploy-frontend:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - install_nodejs_13
      - install_awscli
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            # npm update
            npm install
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo "${API_URL}"
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
            
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      - install_tar_unzip
      - install_ansible
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [backend-build]
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["d0:f5:31:3a:b8:0e:a4:eb:f3:f9:fc:9b:81:08:57:93"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*

            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls -a .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs_13
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Backend smoke test
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)

            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl -v $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - install_nodejs_13
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            # Query AWS CloudFormation for a certain export value
            export OLD_WORKFLOW_ID=$(aws cloudformation list-exports \
                --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            
            # Save old workflow ID
            echo $OLD_WORKFLOW_ID >> ~/project/OLD_WORKFLOW_ID.txt
            cat ~/project/OLD_WORKFLOW_ID.txt
            
            # Save it on KVDB.io for retrieving it later
            curl https://kvdb.io/DkX3oHU6rtDfjXcrrzWZMV/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OLD_WORKFLOW_ID.txt
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo Old Wokflow ID: "$(cat ~/project/OLD_WORKFLOW_ID.txt)"
            echo Current Wokflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"

            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  udaPeople-workflow:
    jobs:
      - say-hello
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
